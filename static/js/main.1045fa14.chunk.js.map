{"version":3,"sources":["classes/expense.js","utils/splitwise.js","Component/nav.js","Component/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Expense","p1","p2","val","this","person1","person2","amount","upheapify","heap","idx","pi","Math","floor","first","temp","downheapify","lc","rc","length","largest","push_heap","key","ob","push","pop_heap","i","pop","heap_top","Navbar","className","style","backgroundColor","src","alt","width","height","Home","useState","name","setName","allNames","setAllNames","flag","setFlag","finalValues","setFinalValues","items","setItems","outputList","setOutputList","inputGraphData","setInputGraphData","inputGraphConfig","setInputGraphConfig","outputGraphData","setOutputGraphData","handleFinalChange","event","target","value","generateNodes","map","item","id","generateLinks","source","generateOutputLinks","TextField","label","variant","disabled","onChange","Button","color","onClick","preventDefault","previous","index","Grid","container","xs","md","textAlign","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","row","scope","FormControl","InputLabel","Select","MenuItem","type","placeholder","InputLabelProps","shrink","size","e","alert","console","log","data","nodes","links","freezeAllDragEvents","nodeHighlightBehavior","node","highlightStrokeColor","fontSize","link","highlightColor","renderLabel","labelProperty","directed","input","parseInt","output","transactions","net_balance","positive","negative","p","result","exp","second","min","splitwise","Object","keys","config","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1045fa14.chunk.js","sourcesContent":["export default class Expense {\n  constructor(p1, p2, val) {\n    this.person1 = p1;\n    this.person2 = p2;\n    this.amount = val;\n  }\n}","import Expense from \"../classes/expense\";\nfunction upheapify(heap, idx) {\n\t// heap = [{first: net_value, second: person}]\n\tif(idx == 0) return;\n\tvar pi = Math.floor((idx-1)/2);\n\tif(heap[pi].first < heap[idx].first) {\n\t\tvar temp = heap[pi];\n\t\theap[pi] = heap[idx];\n\t\theap[idx] = temp;\n\t\tupheapify(heap, pi);\n\t} else {\n\t\treturn;\n\t}\n}\n\nfunction downheapify(heap, idx) {\n\tvar lc = 2*idx+1;\n\tvar rc = 2*idx+2;\n\tif(lc >= heap.length && rc >= heap.length) return;\n\tvar largest = idx;\n\tif(lc < heap.length && heap[lc].first > heap[largest].first) {\n\t\tlargest = lc;\n\t}\n\tif(rc < heap.length && heap[rc].first > heap[largest].first) {\n\t\tlargest = rc;\n\t}\n\tif(largest == idx) return;\n\tvar temp = heap[largest];\n\theap[largest] = heap[idx];\n\theap[idx] = temp;\n\tdownheapify(heap, largest);\n}\n\nfunction push_heap(heap, key, val) {\n\tvar ob = {\"first\": key, \"second\": val}\n\theap.push(ob);\n\tupheapify(heap, heap.length-1);\n}\n\nfunction pop_heap(heap) {\n\tif(heap.length == 0) return 0;\n\tvar i = heap.length - 1;\n\tvar temp = heap[0];\n\theap[0] = heap[i];\n\theap[i] = temp;\n\theap.pop();\n\tdownheapify(heap, 0);\n}\n\nfunction heap_top(heap) {\n\tif(heap.length == 0) {\n\t\treturn;\n\t}\n\treturn heap[0];\n}\n\n\n\n// transactions = [{person1: 'pulkit', person2: 'deepak', amount: 100}]\nexport function splitwise(transactions) {\n\t// transactions array will store an object of expense class\n\tvar net_balance = {}; // hashmap or also called as object in js\n\tfor(var i = 0; i < transactions.length; i++) {\n\t\tvar e = transactions[i]; // e is an object of expense class\n\n\t\t// person1 is the payer so under a credit\n\t\t// person2 is the payee so under a debit\n\t\tif(e.person1 in net_balance) {\n\t\t\t// checks whther e.person1 is present in hashmap or not\n\t\t\tnet_balance[e.person1] += e.amount;\n\t\t} else {\n\t\t\tnet_balance[e.person1] = e.amount;\n\t\t}\n\n\t\tif(e.person2 in net_balance) {\n\t\t\tnet_balance[e.person2] -= e.amount;\n\t\t} else {\n\t\t\tnet_balance[e.person2] = -e.amount;\n\t\t}\n\t}\n\n\n\tvar positive = []; // heap of credit holders\n\tvar negative = []; // heap of debit holders\n\n\tfor(const p in net_balance) {\n\t\tif(net_balance[p] > 0) {\n\t\t\tpush_heap(positive, net_balance[p], p);\n\t\t} else {\n\t\t\tpush_heap(negative, -1*net_balance[p], p);\n\t\t}\n\t}\n\n\tvar result = []; // array of expense objects\n\n\twhile(positive.length > 0) {\n\t\tvar p1 = heap_top(positive);\n\t\tvar p2 = heap_top(negative);\n\t\tpop_heap(positive);\n\t\tpop_heap(negative);\n\t\tlet exp = new Expense(p2.second, p1.second, Math.min(p1.first, p2.first));\n\t\tresult.push(exp);\n\t\tif(p1.first > p2.first) {\n\t\t\tpush_heap(positive, p1.first - p2.first, p1.second);\n\t\t} else if(p1.first < p2.first) {\n\t\t\tpush_heap(negative, p2.first - p1.first, p2.second);\n\t\t}\n\t}\n\n\treturn result;\n}","import { color } from 'd3-color'\nimport React from 'react'\n\n\nexport default function Navbar() {\n    return (\n        \n        <nav className=\"navbar navbar-dark\" style={{backgroundColor: \"#008080\" }}>\n            <div className=\"container-fluid\">\n                <a className=\"navbar-brand\" >\n                    <img src=\"money-transfer.png\" alt=\"\" width=\"30\" height=\"24\" className=\"d-inline-block align-text-top\" />\n                Money Splitwise\n                </a>\n            </div>\n        </nav>\n    )\n}\n\n\n\n\n","import React, { useState, } from 'react'\nimport {\n  TextField,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  TableCell,\n  TableContainer,\n  Paper,\n  Table,\n  TableHead,\n  TableRow,\n  TableBody,\n  Grid,\n} from '@material-ui/core'\nimport { Graph } from 'react-d3-graph'\nimport Expense from '../classes/expense'\nimport { splitwise } from '../utils/splitwise'\nimport Navbar from './nav'\n\n\nconst Home = () => {                          //arrow function and const renders new variable every time\n  const [name, setName] = useState('')\n  const [allNames, setAllNames] = useState([])\n  const [flag, setFlag] = useState(false)\n  const [finalValues, setFinalValues] = useState({\n    \"person1\": \"\",\n    \"person2\": \"\",\n    \"amount\": \"\"\n  })\n  const [items, setItems] = useState([])\n  const [outputList, setOutputList] = useState([])\n\n  const { person1, person2, amount } = finalValues;\n\n  const [inputGraphData, setInputGraphData] = useState({})\n  const [inputGraphConfig, setInputGraphConfig] = useState({})\n\n  const [outputGraphData, setOutputGraphData] = useState({})\n\n  const handleFinalChange = name => event => {\n    setFinalValues({ ...finalValues, [name]: event.target.value })      // ... - spread operator \n  }\n\n  const handleChange = (event) => {\n    setName(event.target.value)\n  }\n\n  const addParticipant = event => {\n    event.preventDefault();\n    setAllNames(previous => [{ name }, ...previous])\n    setName('')\n  }\n\n  const listOfNames = () => {\n    return (\n      <div className=\"allnames\">\n        <h4>Members</h4>\n\n        {allNames.map((item, index) => (\n          <h5 style={{ color: \"#3f3f3f\" }} key={index}> { item.name}</h5>\n        ))\n        }\n      </div>\n    )\n  }\n\n  const handleOpenForm = () => {\n    setFlag(!false)\n  }\n\n  const myForm = () => {\n    function addValues() {\n      if ((finalValues['person1'] !== \"\") && (finalValues['person2'] !== \"\") && (finalValues['amount'] !== \"\")) {\n        setItems([...items, finalValues])\n      } else {\n        alert(\"Enter all Fields\")\n      }\n      setFinalValues({\n        ...finalValues,\n        \"person1\": \"\",\n        \"person2\": \"\",\n        \"amount\": \"\"\n      })\n    }\n    return (\n      <TableContainer component={Paper} className=\"table\">\n        <Table aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\">Payer</TableCell>\n              <TableCell align=\"center\">Payee</TableCell>\n              <TableCell align=\"center\">Amount</TableCell>\n              <TableCell align=\"center\">Add</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>                                      \n            {items.length > 0 && items.map((row) => (\n              <TableRow key={row.name}>\n                <TableCell component=\"th\" align=\"center\" scope=\"row\">       \n                  {row.person1}\n                </TableCell>\n                <TableCell align=\"center\">{row.person2}</TableCell>\n                <TableCell align=\"center\">{row.amount}</TableCell>\n              </TableRow>\n             ))}     \n            <TableRow>\n              <TableCell align=\"center\">\n                <FormControl>\n                  <InputLabel>Payer</InputLabel>\n                  <Select value={person1} onChange={handleFinalChange(\"person1\")}>\n                    {allNames.map(item => (\n                      <MenuItem value={item.name} >{item.name}</MenuItem>\n                    ))\n                    }\n                  </Select>\n                </FormControl>\n              </TableCell>\n\n\n              <TableCell align=\"center\">\n                <FormControl>\n                  <InputLabel>Payee</InputLabel>\n                  <Select value={person2} onChange={handleFinalChange(\"person2\")}>\n                    {allNames.map(item =>\n                    ((person1 !== item.name) ? <MenuItem value={item.name}>{item.name}</MenuItem> : <></>\n                    ))\n                    }\n                  </Select>\n                </FormControl>\n              </TableCell>\n\n\n              <TableCell align=\"center\">\n                <FormControl>\n                  <TextField\n                    id=\"standard-number\"\n                    label=\"Amount\"\n                    type=\"number\"\n                    value={amount}\n                    placeholder=\"Enter Amount\"\n                    onChange={handleFinalChange(\"amount\")}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                  />\n                </FormControl>\n              </TableCell>\n\n\n              <TableCell align=\"center\">\n                <Button\n                  size=\"small\"\n                  variant=\"outlined\"\n                  color=\"primary\"\n                  onClick={(e) => { addValues() }}\n                >\n                  + ADD\n                </Button>\n\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </TableContainer>\n    )\n  }\n\n  const handleTransactionDataSubmit = () => {\n    console.log(\"Participants: \", allNames, \" transactions: \", items)\n    const data = {\n      nodes: generateNodes(),\n      links: generateLinks(),\n    }\n    const config = {\n      freezeAllDragEvents: true,\n      nodeHighlightBehavior: true,\n      node: {\n        color: \"lightgreen\",\n        highlightStrokeColor: \"blue\",\n        fontSize: 12,\n      },\n      link: {\n        highlightColor: \"lightblue\",\n        renderLabel: true,\n        labelProperty: \"amount\",\n        fontSize: 12,\n      },\n      directed: true,\n      height: 600,\n      width: 600,\n    };\n\n    setInputGraphData(data)\n    setInputGraphConfig(config)\n  }\n\n  const generateNodes = () => allNames.map(item => ({ id: item.name }))\n\n  const generateLinks = () => items.map(({ person1, person2, amount }) => ({ source: person1, target: person2, amount }))\n\n  const generateOutputLinks = (items) => items.map(({ person1, person2, amount }) => ({ source: person1, target: person2, amount }))\n\n  const splitwiseTransactions = () => {\n    const input = []\n    for (let item of items) {\n      input.push(new Expense(item.person1, item.person2, parseInt(item.amount)))\n    }\n    const output = splitwise(input)\n    console.log('output: ', output)\n    setOutputList(output)\n    setOutputGraphData({ nodes: generateNodes(), links: generateOutputLinks(output) })\n  }\n\n  return (\n    <div>\n      <Navbar />\n      <div className=\"name-component\">\n        <div className=\"p-name\">\n          <h3>Names of group members</h3>\n          <div className=\"p-name-field\">\n            <TextField id=\"outlined-basic\" label=\"Name\"\n              variant=\"outlined\"\n              value={name}\n              disabled={flag}\n              onChange={handleChange} />\n          </div>\n          <Button variant=\"contained\"\n            color=\"primary\"\n            onClick={addParticipant}\n          >\n            Add\n                </Button>\n        </div>\n        {allNames && allNames.length ? (\n          <>\n            <div className=\"list-div\">\n              <div className=\"list-all-names\">\n                {listOfNames()}\n              </div>\n            </div>\n            <Button variant=\"contained\" color=\"secondary\" onClick={handleOpenForm}>Submit</Button>\n          </>\n        ) : null}\n\n      </div>\n\n      {flag ? (\n        <>\n          <Grid container>\n            <Grid item xs={12} md={6}>\n              <div>\n                <div>\n                  <h4>Transactions</h4>\n                  <div style={{ textAlign: \"left\" }}>\n                    <p>   Instructions to follow:-</p>\n                    <ol>\n                      <li>Enter the names of the Payer in first column</li>\n                      <li>Enter the names of the Payee in second column</li>\n                      <li>Enter the amount paid in the third column</li>\n                      <li>Click on Build Graph to build a graph from the given transactions</li>\n                      <li>Click on Simplify payments button when you are done with entering the payments.</li>\n                    </ol>\n                  </div>\n                </div>\n              </div>\n              <div className=\"form\">\n                {flag && myForm()}\n              </div>\n\n              {items && items.length ? (\n                <div className=\"form-names\">\n                  <Button variant=\"contained\" color=\"primary\" onClick={handleTransactionDataSubmit}>Build Graph</Button>\n                  <Button variant=\"contained\" color=\"secondary\" onClick={splitwiseTransactions}>Simplify Settlements</Button>\n                </div>\n              ) : null}\n            </Grid>\n\n            <Grid item xs={12} md={6}>\n              {Object.keys(inputGraphData).length && Object.keys(inputGraphConfig).length ? (\n                <>\n                  <h5>Generated graph from the transactions entered</h5>\n                  <Graph\n                    id=\"graph-id\" // id is mandatory\n                    data={inputGraphData}\n                    config={inputGraphConfig}\n                  />\n                </>\n              ) : null}\n            </Grid>\n          </Grid>\n\n          <Grid container>\n            <Grid item xs={12} md={6}>\n              {\n                outputList && outputList.length ? (\n                  <>\n                    <h3> Simplified Settlement</h3>\n                    <TableContainer component={Paper} className=\"table\">\n                      <Table aria-label=\"simple table\">\n                        <TableHead>\n                          <TableRow>\n                            <TableCell align=\"center\">Payer</TableCell>\n                            <TableCell align=\"center\">Payee</TableCell>\n                            <TableCell align=\"center\">Amount</TableCell>\n                          </TableRow>\n                        </TableHead>\n                        <TableBody>\n                          {outputList.length && outputList.map((row) => (\n                            <TableRow key={row.name}>\n                              <TableCell component=\"th\" align=\"center\" scope=\"row\">\n                                {row.person1}\n                              </TableCell>\n                              <TableCell align=\"center\">{row.person2}</TableCell>\n                              <TableCell align=\"center\">{row.amount}</TableCell>\n                            </TableRow>\n                          ))}\n                        </TableBody>\n                      </Table>\n                    </TableContainer>\n                  </>\n                ) : null\n              }\n            </Grid>\n            <Grid item xs={12} md={6}>\n              {\n                Object.keys(outputGraphData).length && Object.keys(inputGraphConfig).length ? (\n                  <>\n                    <h5>Graph generated from the solution of algorithm</h5>\n                    <Graph\n                      id=\"graph-id-output\" // id is mandatory\n                      data={outputGraphData}\n                      config={inputGraphConfig}\n                    />\n                  </>\n                ) : null\n              }\n            </Grid>\n          </Grid>\n        </>\n      ) : null}\n    </div>\n  )\n}\n\nexport default Home","import React from 'react'\nimport './App.css';\nimport Home from './Component/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <Home />\n      {/* <Demo /> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}